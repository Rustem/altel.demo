general_daa
general_data
layout(m)
par(mar=c(3, 3, 0, 0))
plot(general_data)
plot(general_data)
plot(general_data)
plot(general_data)
plot(general_data)
plot(general_data)
barplot(general_data)
attach(dataset_general)
newdata <- dataset_general[order(count),]
newdata
newdata <- dataset_general[order(-count),]
newdata
general_data <- dataset_general$count
names(general_data) <- dataset_general$hlc_logical
barplot(general_data)
barplot(general_data)
barplot(general_data)
general_data
barplot(order(general_data))
barplot(order(general_data))
barplot(order(general_data))
names(general_data)
barplot(general_data)
barplot(general_data)
barplot(general_data)
barplot(order(general_data))
barplot(order(general_data))
barplot(order(general_data))
detach(dataset_general)
order(general_data)
general_data
sort(general_data)
barplot(sort(general_data))
barplot(sort(-general_data))
barplot(sort(-general_data))
barplot(sort(general_data))
help(sort)
barplot(sort(general_data), decreasing=TRUE)
barplot(sort(general_data), decreasing=TRUE)
warnings()
barplot(sort(general_data, decreasing=TRUE))
barplot(sort(general_data, decreasing=TRUE))
barplot(sort(general_data, decreasing=TRUE))
dataset_by_node
help(barplot)
unique(dataset_by_node$node_uuid)
nodes <- unique(dataset_by_node$node_uuid)
dataset_node_1 <- dataset_by_node[dataset_by_node$node_uuid == nodes[1]]
dataset_node_1 <- dataset_by_node[dataset_by_node$node_uuid == nodes[1],]
dataset_node_1
dataset_node_2 <- dataset_by_node[dataset_by_node$node_uuid == nodes[2],]
dataset_node_2
node_1_data <- dataset_by_node_1$count
node_1_data <- dataset_node_1$count
names(node_1_data) <- dataset_node_1$hlc_logical
node_2_data <- dataset_node_2$count
names(node_2_data) <- dataset_node_2$hlc_logical
help(barplot)
barplot(node_1_data, main="Distribution of logical part by node", sub="At node " + node[1])
barplot(node_1_data, main="Distribution of logical part by node", sub="At node " + nodes[1])
nodes[1]
nodes[1] + "Hello"
c(nodes[1], "hello")
barplot(node_1_data, main="Distribution of logical part by node", sub=paste("Node", nodes[1]))
barplot(node_1_data, main="Distribution of logical part by node", sub=paste("Node", nodes[1]))
barplot(node_1_data, main="Distribution of logical part by node", sub=paste("Node", nodes[1]))
barplot(sort(general_data, decreasing=TRUE))
barplot(node_1_data, main="Distribution of logical part by node", sub=paste("Node", nodes[1]))
paste("node", nodes[1])
barplot(node_1_data, main="Distribution of logical part by node", sub=paste("Node", nodes[1]))
barplot(sort(general_data, decreasing=TRUE), main="Overall distribution of logical part")
barplot(node_1_data, main=paste("Node", nodes[1]))
barplot(node_2_data, main=paste("Node", nodes[2]))
help(png)
png("disser_toy.png", width=640, height=480, units="px", pointsize=12, bg="white", res=NA)
layout(m)
par(mar=c(3, 3, 0, 0))
barplot(sort(general_data, decreasing=TRUE), main="Overall distribution of logical part")
barplot(node_1_data, main=paste("Node", nodes[1]))
barplot(node_2_data, main=paste("Node", nodes[2]))
dev.off()
barplot(sort(general_data, decreasing=TRUE), main="Overall distribution of logical part", xlab="Logical value of HLC")
barplot(node_1_data, xlab=paste("At node", nodes[1]))
barplot(node_2_data, xlab=paste("At node", nodes[2]))
help(barplot)
barplot(sort(general_data, decreasing=TRUE), main="Overall distribution of logical part", xlab="Logical value of HLC", cex.names="0.8")
barplot(node_1_data, xlab=paste("At node", nodes[1]), cex.names=0.5)
help(barplot)
barplot(node_2_data, xlab=paste("At node", nodes[2]))
barplot(sort(general_data, decreasing=TRUE), main="Overall distribution of logical part", xlab="Logical value of HLC")
barplot(node_1_data, xlab=paste("At node", nodes[1]))
barplot(node_2_data, xlab=paste("At node", nodes[2]))
help(barplot)
chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
types <- factor(chests)
types
types$Levels
print(types)
as.integers(types)
as.integer(types)
levels(types)
help(merge)
help(lm)
help(package="ggplot2")
install.packages("ggplot2")
library('RPostgreSQL')
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host="178.62.168.162", user="postgres", password="postgres", dbname="disser")
dataset_general <- dbSendQuery(con, "SELECT evententity.hlc_logical, COUNT(*) FROM evententity GROUP BY evententity.hlc_logical")
dataset_general <- fetch(dataset_general, n=-1)
dataset_by_node <- dbSendQuery(con, "SELECT node_uuid, hlc_logical, COUNT(*) FROM evententity GROUP BY evententity.hlc_logical")
dataset_by_node <- dbSendQuery(con, "SELECT evententity.node_uuid, evententity.hlc_logical, COUNT(*) FROM evententity GROUP BY evententity.hlc_logical")
dataset_by_node <- dbSendQuery(con, "SELECT evententity.node_uuid, evententity.hlc_logical, COUNT(*) FROM evententity GROUP BY evenentity.node_uuid, evententity.hlc_logical")
dataset_by_node <- dbSendQuery(con, "SELECT evententity.node_uuid, evententity.hlc_logical, COUNT(*) FROM evententity GROUP BY evenentity.node_uuid, evententity.hlc_logical")
dataset_by_node <- dbSendQuery(con, "SELECT node_uuid, hlc_logical, COUNT(*) FROM evententity GROUP BY evententity.node_uuid, evententity.hlc_logical")
dataset_by_node <- fetch(dataset_by_node, n=-1)
m <- rbind(c(1, 1), c(1, 2, 3))
m <- rbind(c(1, 1, 1), c(1, 2, 3))
layout(m)
layout.show(3)
layout.show(4)
layout.show(3)
layout.show(5)
layout.show(1)
layout.show(2)
layout.show(3)
layout.show(4)
m <- rbind(c(1, 1, 1), c(2, 3, 4))
layout(m)
layout.show(4)
layout(m)
par(mar=c(3, 3, 0, 0))
general_data <- dataset_general$count
names(general_data) <- dataset_general$hlc_logical
barplot(sort(general_data, decreasing=TRUE))
nodes <- unique(dataset_by_node$node_uuid)
dataset_node_1 <- dataset_by_node[dataset_by_node$node_uuid == nodes[1],]
dataset_node_2 <- dataset_by_node[dataset_by_node$node_uuid == nodes[2],]
dataset_node_3 <- dataset_by_node[dataset_by_node$node_uuid == nodes[3],]
node_1_data <- dataset_node_1$count
names(node_1_data) <- dataset_node_1$hlc_logical
node_2_data <- dataset_node_2$count
names(node_2_data) <- dataset_node_2$hlc_logical
node_3_data <- dataset_node_3$count
names(node_3_data) <- dataset_node_3$hlc_logical
barplot(node_1_data, main=paste("Node", nodes[1]))
barplot(node_2_data, main=paste("Node", nodes[1]))
barplot(node_2_data, main=paste("Node", nodes[2]))
barplot(sort(general_data, decreasing=TRUE))
names(node_1_data) <- dataset_node_1$hlc_logical
barplot(node_1_data, main=paste("Node", nodes[1]))
barplot(node_2_data, main=paste("Node", nodes[2]))
barplot(node_3_data, main=paste("Node", nodes[3]))
barplot(sort(general_data, decreasing=TRUE))
barplot(sort(node_1_data, decreasing=TRUE))
barplot(sort(node_2_data, decreasing=TRUE))
barplot(sort(node_3_data, decreasing=TRUE))
sorted_general_data <- sort(general_data, decreasing=TRUE)
sorted_general_data / sum(sorted_general_data)
sorted_general_data / sum(sorted_general_data) * 100
percentages <- sorted_general_data / sum(sorted_general_data) * 100
data.frame(names(sorted_general_data), sorted_general_data)
data.frame(names(sorted_general_data), percentages)
help(data.frame)
data.frame(names(sorted_general_data), percentages, row.names=c(logical_val, percentages))
data.frame(names(sorted_general_data), percentages, row.names=c('logical_val', 'percentages'))
data.frame(logical_val=names(sorted_general_data), percent=percentages)
percentages <- data.frame(logical_val=names(sorted_general_data), percent=percentages)
head(percentages)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
table <- tableGrob(percentages)
grid.newpage()
h <- grobHeight(table)
w <- grobWidth(table)
title <- textGrob("Distribution of logical part of HLC across three nodes", y=unit(0.5,"npc") + 0.5*h,
vjust=0, gp=gpar(fontsize=14))
gt <- gTree(children=gList(table, title))
grid.draw(gt)
title <- textGrob("Distribution of logical part of HLC across three nodes", y=unit(0.5,"npc") + 0.5*h,
vjust=0, gp=gpar(fontsize=10))
grid.draw(gt)
gt <- gTree(children=gList(table, title))
grid.draw(gt)
grid.newpage()
gt <- gTree(children=gList(table, title))
grid.draw(gt)
grid.newpage()
title <- textGrob("Distribution of logical part of HLC across three nodes", y=unit(0.5,"npc") + 0.5*h,
vjust=0, gp=gpar(fontsize=20))
gt <- gTree(children=gList(table, title))
grid.draw(gt)
title <- textGrob("", y=unit(0.5,"npc") + 0.5*h,
vjust=0, gp=gpar(fontsize=20))
grid.newpage()
gt <- gTree(children=gList(table, title))
grid.draw(gt)
install.packages('shiny')
library(shiny)
cat
make_list <- function() {
list(date = Sys.Date(),
time = Sys.time(),
timezone = Sys.timezone())
}
make_list()
make_list$time
make_list()$time
make_list()$timezone
help(list)
install.packages("shiny")
install.packages('shiny', repos='http://cran.rstudio.com/')
install.packages('codetools')
install.packages("shiny")
library(shiny)
runExample("01_hello")
help(runExample)
interactive()
runExample()
runExample('03_reactivity')
library(dplyr)
library(nycflights13)
tbl_flights <- tbl_df(flights)
distinct(tbl_flights)
mutate(tbl_flights, gain = arr_delay - dep_delay, speed = distance / air_time * 60)
mutate(tbl_flights, gain = arr_delay - dep_delay, gain_per_hour = gain / (air_time / 60), speed = distance / air_time * 60)
help("summarise")
summarise(tbl_flights, delay = mean(dep_delay, na.rm = TRUE))
summarise(tbl_flights, delay = mean(dep_delay, na.rm = TRUE))
summarise(tbl_flights, delay = mean(dep_delay, na.rm = TRUE))
summarise(tbl_flights, delay = mean(dep_delay, na.rm = TRUE))
sample_n(tbl_flights, 10)
sample_frac(tbl_flights, 0.001)
sample_frac(tbl_flights, 0.0001)
sample_frac(tbl_flights, 0.00001)
sample_frac(tbl_flights, 0.000001)
help(sample_frac)
sample_frac(tbl_flights, 0.000001, replace=TRUE)
sample_frac(tbl_flights, 0.0001, replace=TRUE)
sample_frac(tbl_flights, 0.0001)
by_tailnum <- group_by(tbl_flights, tailnum)
help(n)
delay <- summarise(by_tailnum, count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay, na.rm =TRUE))
delay
delay <- summarise(by_tailnum, count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay, na.rm =TRUE))
delay
delay <- filter(delay, count > 20, dist < 2000)
delay
delay <- filter(delay, count < 20)
delay
delay <- summarise(by_tailnum, count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay, na.rm =TRUE))
delay <- filter(delay, count > 20, dist < 2000)
ggplot(delay, aes(dist, delay) + geom_point(aes(size = count), alpha=1/2) + geom_smooth() + scale_size_area())
library(ggplot)
library(ggplot
)
help(IQR)
destinations <- group_by(tbl_flights, dest)
summarise(destinations, planes=n_distinct(tailnum), flights=n())
daily <- group_by(flights, year, month, day)
(per_day   <- summarise(daily, flights = n()))
(per_month <- summarise(per_day, flights = sum(flights)))
(per_year  <- summarise(per_month, flights = sum(flights)))
a1 <- group_by(flights, year, month, dest)
a2 <- select(a1, arr_delay, dep_delay)
a2
a3 <- summarise(a2, arr = mean(arr_delay, na.rm=TRUE),)
a3 <- summarise(a2, arr = mean(arr_delay, na.rm=TRUE), dep = mean(dep_delay, na.rm =TRUE))
a3
filter(a3, dep == 'IAH')
filter(a3, dest == 'IAH')
filter(
summarise(
select(
group_by(flights, year, month, day),
arr_delay, dep_delay
),
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
),
arr > 30 | dep > 30
)
library(shiny)
help(reactiveValues())
help(reactiveValues)
cat("foo\n")
cat("bar\n", file=stderr())
runExample('063-superzip')
runExample()
runExample('063-superzip-example')
help(brewer)
cleantable
help(cleantable)
runExample('063-superzip-example')
help(structure)
structure(state.abb, name=state.name)
state
state.x77
state.x
allzips <- readRDS("data/superzip.rds")
runExample
system.file('examples', package='shiny')
examples_dir <- system.file('examples', package='shiny')
paste(dir, 'data', sep="/")
paste(dir, 'data', sep="/")
help(paste)
dir
cur_dir <- system.file('examples', package='shiny')
paste(cur_dir, 'data', sep="/")
paste
pj <- function(...) { return(paste(..., sep='/')) }
pj(cur_dir, 'data', 'superzip.rds')
readRDS(pj(cur_dir, 'data', 'superzip.rds'))
readRDS(pj(cur_dir, 'data', 'superzip.rds'))
readRDS(pj(cur_dir, '063-superzip-example', 'data', 'superzip.rds'))
allzips <- tbl_df(readRDS(pj(cur_dir, '063-superzip-example', 'data', 'superzip.rds')))
allzips
allzips$latitude <- jitter(allzips$latitude)
allzips
cleantable <- allzips %>%
select(
City = city.x,
State = state.x,
Zipcode = zipcode,
Rank = rank,
Score = centile,
Superzip = superzip,
Population = adultpop,
College = college,
Income = income,
Lat = latitude,
Long = longitude
)
tbl_df(cleantable)
runExample('063-superzip-example')
help(try)
runExample('063-superzip-example')
runExample('063-superzip-example')
runExample('063-superzip-example')
runExample('063-superzip-example')
help(brewer)
brewer.pal(7, "Spectral")
brewer.pal(7, "Spectral")
runExample('063-superzip-example')
list(color=1:10)
list(color=1:10)
runExample('063-superzip-example')
man(cut)
help(cut)
a <- 1:100
cut(a, 7)
a
cut(a, 7, labels=FALSE)
a
cut(a, 7, labels=FALSE)
brewer.pal(7, "Spectral")[cut(1:100, 7, labels=FALSE)]
display.brewer.pal()
brewer.pal(3, "Accent")
runExample('063-superzip-example')
runExample('063-superzip-example')
display.brewer.all(type="qual")
display.brewer.all(n=5,type="div",exact.n=TRUE)
display.brewer.all(n=3,type="div",exact.n=TRUE)
display.brewer.all(n=3,type="qual",exact.n=TRUE)
display.brewer.all(n=3,type="div",exact.n=TRUE)
display.brewer.all(n=3,type="seq",exact.n=TRUE)
display.brewer.all(n=3,type="seq",exact.n=TRUE)
display.brewer.all(n=3,type="div",exact.n=TRUE)
display.brewer.all(n=3,type="div",exact.n=TRUE)
display.brewer.all(n=3,type="qual",exact.n=TRUE)
runExample('063-superzip-example')
#BaseStationID,
#City,
#Latitude,
#Longitude,
#Status,
#ConnAbons,
#Technology
#Manufacturer
#Model
library(uuid)
pj <- function(...) { return(paste(..., sep='/')) }
data_dir <- pj(getwd(), 'data')
raw_csv <- read.csv(pj(data_dir, 'cities.csv'))
cities <- raw_csv %>%
select(
city = RegionName,
lat = Latitude,
lon = Longitude
)
cities <- mutate(cities, zoom=8)
STATUSES <- 0:100
TECH <- c('2g', '3g', 'lte')
MODELS <- c('X-100', 'Y-200', 'X-250', 'Y-300')
MANUFACTURERS <- 'HUAWEI'
bs <- data.frame(
BaseStationID=character(),
City=character(),
Latitude=double(),
Longitude=double(),
Status=character(),
ConnAbons=integer(),
Technology=character(),
Manufactuer=character(),
Model=character())
for(from in seq(1, nrow(cities))) {
curCity <- cities[from,]
if(curCity$city == 'Kazakhstan')
next
curBSLats <- replicate(100, jitter(curCity$lat, factor=0.6))
curBSLons <- replicate(100, jitter(curCity$lon, factor=0.6))
for(i in seq(1, length(curBSLats))) {
curLat <- curBSLats[i]
curLon <- curBSLons[i]
sts <- sample(STATUSES, 1)
if(sts == 0) {
sts = 'off_air'
}
if(sts == 100) {
sts = 'ok'
}
curBS <- rbind(bs, data.frame(
BaseStationId=UUIDgenerate(),
City=curCity$city,
Latitude=curLat,
Longitude=curLon,
Status=sts,
ConnAbons=sample(5000:10000, 1),
Technology=sample(TECH, 1),
Manufacturer=MANUFACTURERS,
Model=sample(MODELS, 1)
))
bs <- rbind(curBS, bs)
}
}
write.csv(bs, pj(data_dir, 'base_stations_2.csv'), quote=FALSE, row.names=FALSE)
# replicate(100, jitter(c(42.5555, 72.34), factor=0.6))
getwd()
bs <- rbind(bs, curBS)
#BaseStationID,
#City,
#Latitude,
#Longitude,
#Status,
#ConnAbons,
#Technology
#Manufacturer
#Model
library(uuid)
pj <- function(...) { return(paste(..., sep='/')) }
data_dir <- pj(getwd(), 'data')
raw_csv <- read.csv(pj(data_dir, 'cities.csv'))
cities <- raw_csv %>%
select(
city = RegionName,
lat = Latitude,
lon = Longitude
)
cities <- mutate(cities, zoom=8)
STATUSES <- 0:100
TECH <- c('2g', '3g', 'lte')
MODELS <- c('X-100', 'Y-200', 'X-250', 'Y-300')
MANUFACTURERS <- 'HUAWEI'
bs <- data.frame(
BaseStationID=character(),
City=character(),
Latitude=double(),
Longitude=double(),
Status=character(),
ConnAbons=integer(),
Technology=character(),
Manufactuer=character(),
Model=character())
for(from in seq(1, nrow(cities))) {
curCity <- cities[from,]
if(curCity$city == 'Kazakhstan')
next
curBSLats <- replicate(100, jitter(curCity$lat, factor=0.6))
curBSLons <- replicate(100, jitter(curCity$lon, factor=0.6))
for(i in seq(1, length(curBSLats))) {
curLat <- curBSLats[i]
curLon <- curBSLons[i]
sts <- sample(STATUSES, 1)
if(sts == 0) {
sts = 'off_air'
}
if(sts == 100) {
sts = 'ok'
}
curBS <- data.frame(
BaseStationId=UUIDgenerate(),
City=curCity$city,
Latitude=curLat,
Longitude=curLon,
Status=sts,
ConnAbons=sample(5000:10000, 1),
Technology=sample(TECH, 1),
Manufacturer=MANUFACTURERS,
Model=sample(MODELS, 1)
)
bs <- rbind(bs, curBS)
}
}
write.csv(bs, pj(data_dir, 'base_stations_2.csv'), quote=FALSE, row.names=FALSE)
# replicate(100, jitter(c(42.5555, 72.34), factor=0.6))
getwd()
shiny::runApp('work/projects/r/shiny/altel.demo')
